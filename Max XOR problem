#include <bits/stdc++.h>
using namespace std;

class node{
 public : 
    node* left;
    node* right;

    node(){
        left = right = NULL;
    }
};

class Trie{
   node* root;
 public : 
    Trie(){
        root = new node();
    }

    // num aaya hai 2 cases possible either num some prefixes are same or all different
    void insert(int num){
        node* it = root;
        for(int i=31;i>=0;i--){
            int fetch = (num >> i)&1;
            if(fetch == 0){
               // 2 cases either already present or not present
               if(it -> left == NULL){
                   // not present
                   node* temp = new node();
                   it -> left = temp;
                   it = temp;
               }
               else{
                   it = it -> left;
               }
            }
            else{
                if(it -> right == NULL){
                    node* temp = new node();
                    it -> right = temp;
                    it = temp;
                }
                else{
                    it = it -> right;
                }
            }
        }
    }

    int calculate(int num){
        node* temp = root;
        int result = 0;
        for(int i=31;i>=0;i--){
            int bit = (num>>i)&1;

            if(bit == 0){
                if(temp -> right != NULL){
                    // 1 exist
                    temp = temp -> right;
                    result += (1<<i);
                }
                else{
                    temp = temp -> left;
                }
            }
            else{
                // bit is 1
                if(temp -> left != NULL){
                    temp = temp -> left;
                    result += (1<<i);
                }
                else{
                    temp = temp -> right;
                }
            }
        }
       return result; 
    }

};


int main(){
 
  Trie t;

  int ar[] = {3,10,5,25,2,8};
  int n = sizeof(ar)/sizeof(int);
  int ans = INT_MIN;

    for(int i=0;i<n;i++){
        t.insert(ar[i]);
        ans = max(ans,t.calculate(ar[i]));
    } 

   cout << ans << endl;  

  return 0;   
}
